<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.ailikes.lotus</groupId>
	<artifactId>lotus-platform</artifactId>
	<version>1.0.0-SNAPSHOT</version>
	<packaging>pom</packaging>
	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<maven.compiler.source>1.8</maven.compiler.source>
		<maven.compiler.target>1.8</maven.compiler.target>
		<log4j2.version>2.1</log4j2.version>
		<java.version>1.8</java.version>
		<sharding-jdbc>2.0.3</sharding-jdbc>
		<hutool.version>4.1.13</hutool.version>
		<kaptcha.version>0.0.9</kaptcha.version>
		<swagger.version>2.9.2</swagger.version>
		<disruptor.version>3.4.1</disruptor.version>
		<swagger.m.version>1.0.6</swagger.m.version>
		<net-devh-grpc.version>2.0.1.RELEASE</net-devh-grpc.version>
		<spring-platform.version>Cairo-SR3</spring-platform.version>
		<spring-security.version>5.1.1.RELEASE</spring-security.version>
		<security-oauth2.version>2.3.4.RELEASE</security-oauth2.version>
		<hibernate-validator.verion>5.0.2.Final</hibernate-validator.verion>
		<commons-collections4.version>4.1</commons-collections4.version>
		<fastjson.version>1.2.47</fastjson.version>
		<jasypt.version>1.14</jasypt.version>
		<txlcn.version>5.0.2.RELEASE</txlcn.version>
		<spring-boot.version>2.0.4.RELEASE</spring-boot.version>
		<spring-cloud-dependencies.version>Finchley.SR2</spring-cloud-dependencies.version>
        <docker.plugin.version>0.4.13</docker.plugin.version>
        <docker.host>https://111.207.248.41:2376</docker.host>
        <docker.image.prefix>ailikes</docker.image.prefix>
        <docker.image.version>1.0.1</docker.image.version>
		<core.version>1.0.0-SNAPSHOT</core.version>
	</properties>


	<dependencies>

		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
		</dependency>
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-collections4</artifactId>
			<version>${commons-collections4.version}</version>
		</dependency>
		<dependency>
			<groupId>com.alibaba</groupId>
			<artifactId>fastjson</artifactId>
			<version>${fastjson.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>

		<!-- Micrometer Prometheus registry -->
		<dependency>
			<groupId>io.micrometer</groupId>
			<artifactId>micrometer-registry-prometheus</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>

	</dependencies>
	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-dependencies</artifactId>
				<version>${spring-boot.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<dependency>
				<groupId>io.spring.platform</groupId>
				<artifactId>platform-bom</artifactId>
				<version>${spring-platform.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring-cloud-dependencies.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<dependency>
				<groupId>org.springframework.security.oauth</groupId>
				<artifactId>spring-security-oauth2</artifactId>
				<version>${security-oauth2.version}</version>
			</dependency>
			<dependency>
                <groupId>com.codingapi.txlcn</groupId>
                <artifactId>txlcn-tm</artifactId>
                <version>${txlcn.version}</version>
            </dependency>
            <dependency>
                <groupId>com.codingapi.txlcn</groupId>
                <artifactId>txlcn-tc</artifactId>
                <version>${txlcn.version}</version>
            </dependency>
            <dependency>
                <groupId>com.codingapi.txlcn</groupId>
                <artifactId>txlcn-txmsg-netty</artifactId>
                <version>${txlcn.version}</version>
            </dependency>
		</dependencies>
	</dependencyManagement>

	<build>
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-maven-plugin</artifactId>
					<version>2.0.4.RELEASE</version>
					<executions>
						<execution>
							<goals>
								<goal>repackage</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<artifactId>maven-compiler-plugin</artifactId>
					<configuration>
						<target>${java.version}</target>
						<source>${java.version}</source>
						<encoding>UTF-8</encoding>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-jar-plugin</artifactId>
					<configuration>
						<archive>
							<addMavenDescriptor>false</addMavenDescriptor>
						</archive>
					</configuration>
				</plugin>
                <plugin>
                    <groupId>com.spotify</groupId>
                    <artifactId>docker-maven-plugin</artifactId>
                    <version>0.4.13</version>
                    <executions>
                        <execution>
                            <phase>package</phase>
                            <goals>
                                <goal>build</goal>
                            </goals>
                        </execution>
                        <execution>
                            <id>package-push</id>
                            <phase>package</phase>
                            <goals>
                                <goal>push</goal>    <!--相当于docker的push命令-->
                            </goals>
                        </execution>
                    </executions>
                    <configuration>
                        <!--这一部分是为了实现对远程docker容器的控制-->
                        <!--docker主机地址,用于完成docker各项功能,注意是tcp不是http!-->
                        <!--<dockerHost>${docker.host}</dockerHost>-->
                        <!--docker远程访问所需证书地址,如果docker远程主机没有启用TLS验证则不需要配证书-->
                        <!--<dockerCertPath>./docker-ssh</dockerCertPath>-->
                        <!--这一部分是为了实现docker镜像的构建和推送-->
                        <!--registry地址,用于推送,拉取镜像,我这里用的是阿里的registry-->
                        <!--<registryUrl>registry.hub.docker.com</registryUrl>-->
                        <!--认证配置,用于私有registry认证,如果忘记了可以去阿里的registry查看，该配置在maven的setting文件中-->
                        <!--<serverId>ailikes-docker-registry</serverId>-->
                        <imageName>${docker.image.prefix}/${project.artifactId}</imageName>
                        <imageTags>
                            <imageTag>${docker.image.version}</imageTag>
                        </imageTags>
                        <forceTags>true</forceTags>
                        <dockerDirectory>${project.basedir}/</dockerDirectory>
						<skipDockerPush>true</skipDockerPush>
                        <resources>
                            <resource>
                                <targetPath>/</targetPath>
                                <directory>${project.build.directory}</directory>
                                <include>${project.build.finalName}.jar</include>
                            </resource>
                        </resources>
                    </configuration>
                </plugin>
			</plugins>
		</pluginManagement>
		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<includes>
					<include>**/*.properties</include>
					<include>**/*.yml</include>
					<include>**/*.xml</include>
					<include>**/*.tld</include>
					<include>**/*.p12</include>
					<include>**/*.conf</include>
					<include>**/*.txt</include>
					<include>**/*.wsdl</include>
					<include>**/*.xsd</include>
					<include>**/*.ftl</include>
					<include>processes/*</include>
				</includes>
				<filtering>false</filtering>
			</resource>
			<resource>
				<directory>src/main/java</directory>
				<includes>
					<include>**/*.properties</include>
					<include>**/*.xml</include>
					<include>**/*.tld</include>
				</includes>
				<filtering>false</filtering>
			</resource>
			<resource>
				<directory>src/main/view</directory>
				<includes>
					<include>**/*.*</include>
				</includes>
				<filtering>false</filtering>
			</resource>

			<resource>
				<directory>src/main/proto</directory>
				<includes>
					<include>**/*.proto</include>
				</includes>
				<filtering>false</filtering>
			</resource>
		</resources>
	</build>
	
	<modules>
		<!-- 内部支撑工具 -->
		<module>common-lib</module>
		<!-- 注册中心 -->
		<module>register-center</module>
		<!-- 认证中心 -->
		<!--<module>oauth-center</module>-->
		<!-- 业务网关 -->
		<module>api-gateway</module>
		<!-- 业务中心 -->
		<!--<module>business-center</module>-->
		<!-- 灰度发布中心 <module>gray-center</module> -->
		<!-- 调优中心 <module>tuning-center</module> -->
		<!-- 监控中心 -->
		<!--<module>monitor-center</module>-->
		<!-- spring cloud gateway -->
		<!--<module>new-api-gateway</module>-->
		<!-- web页面门户 -->
		<!--<module>web-portal</module>-->
	</modules>
</project>